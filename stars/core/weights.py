# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _weights
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class DataPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertical"] = _weights.DataPoint_vertical_set
    __swig_getmethods__["vertical"] = _weights.DataPoint_vertical_get
    if _newclass:vertical = _swig_property(_weights.DataPoint_vertical_get, _weights.DataPoint_vertical_set)
    __swig_setmethods__["horizontal"] = _weights.DataPoint_horizontal_set
    __swig_getmethods__["horizontal"] = _weights.DataPoint_horizontal_get
    if _newclass:horizontal = _swig_property(_weights.DataPoint_horizontal_get, _weights.DataPoint_horizontal_set)
    def __init__(self, *args): 
        this = _weights.new_DataPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _weights.delete_DataPoint
    __del__ = lambda self : None;
DataPoint_swigregister = _weights.DataPoint_swigregister
DataPoint_swigregister(DataPoint)

class GalElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _weights.GalElement_size_set
    __swig_getmethods__["size"] = _weights.GalElement_size_get
    if _newclass:size = _swig_property(_weights.GalElement_size_get, _weights.GalElement_size_set)
    __swig_setmethods__["data"] = _weights.GalElement_data_set
    __swig_getmethods__["data"] = _weights.GalElement_data_get
    if _newclass:data = _swig_property(_weights.GalElement_data_get, _weights.GalElement_data_set)
    def __init__(self, *args): 
        this = _weights.new_GalElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _weights.delete_GalElement
    __del__ = lambda self : None;
    def alloc(*args): return _weights.GalElement_alloc(*args)
    def empty(*args): return _weights.GalElement_empty(*args)
    def Push(*args): return _weights.GalElement_Push(*args)
    def Pop(*args): return _weights.GalElement_Pop(*args)
    def Size(*args): return _weights.GalElement_Size(*args)
    def elt(*args): return _weights.GalElement_elt(*args)
    def dt(*args): return _weights.GalElement_dt(*args)
    def SpatialLag(*args): return _weights.GalElement_SpatialLag(*args)
    def Write(*args): return _weights.GalElement_Write(*args)
    def Read(*args): return _weights.GalElement_Read(*args)
    def ReadTxt(*args): return _weights.GalElement_ReadTxt(*args)
GalElement_swigregister = _weights.GalElement_swigregister
GalElement_swigregister(GalElement)

class GalWeight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalWeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalWeight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _weights.new_GalWeight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _weights.delete_GalWeight
    __del__ = lambda self : None;
    __swig_setmethods__["gal"] = _weights.GalWeight_gal_set
    __swig_getmethods__["gal"] = _weights.GalWeight_gal_get
    if _newclass:gal = _swig_property(_weights.GalWeight_gal_get, _weights.GalWeight_gal_set)
    __swig_getmethods__["HasIsolates"] = lambda x: _weights.GalWeight_HasIsolates
    if _newclass:HasIsolates = staticmethod(_weights.GalWeight_HasIsolates)
    def ReadGal(*args): return _weights.GalWeight_ReadGal(*args)
GalWeight_swigregister = _weights.GalWeight_swigregister
GalWeight_swigregister(GalWeight)
GalWeight_HasIsolates = _weights.GalWeight_HasIsolates

class GwtNeighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GwtNeighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GwtNeighbor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbx"] = _weights.GwtNeighbor_nbx_set
    __swig_getmethods__["nbx"] = _weights.GwtNeighbor_nbx_get
    if _newclass:nbx = _swig_property(_weights.GwtNeighbor_nbx_get, _weights.GwtNeighbor_nbx_set)
    __swig_setmethods__["weight"] = _weights.GwtNeighbor_weight_set
    __swig_getmethods__["weight"] = _weights.GwtNeighbor_weight_get
    if _newclass:weight = _swig_property(_weights.GwtNeighbor_weight_get, _weights.GwtNeighbor_weight_set)
    def __init__(self, *args): 
        this = _weights.new_GwtNeighbor(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args): return _weights.GwtNeighbor_assign(*args)
    __swig_destroy__ = _weights.delete_GwtNeighbor
    __del__ = lambda self : None;
GwtNeighbor_swigregister = _weights.GwtNeighbor_swigregister
GwtNeighbor_swigregister(GwtNeighbor)

class GwtElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GwtElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GwtElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbrs"] = _weights.GwtElement_nbrs_set
    __swig_getmethods__["nbrs"] = _weights.GwtElement_nbrs_get
    if _newclass:nbrs = _swig_property(_weights.GwtElement_nbrs_get, _weights.GwtElement_nbrs_set)
    __swig_setmethods__["data"] = _weights.GwtElement_data_set
    __swig_getmethods__["data"] = _weights.GwtElement_data_get
    if _newclass:data = _swig_property(_weights.GwtElement_data_get, _weights.GwtElement_data_set)
    def __init__(self, *args): 
        this = _weights.new_GwtElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _weights.delete_GwtElement
    __del__ = lambda self : None;
    def alloc(*args): return _weights.GwtElement_alloc(*args)
    def empty(*args): return _weights.GwtElement_empty(*args)
    def Push(*args): return _weights.GwtElement_Push(*args)
    def Pop(*args): return _weights.GwtElement_Pop(*args)
    def Size(*args): return _weights.GwtElement_Size(*args)
    def elt(*args): return _weights.GwtElement_elt(*args)
    def dt(*args): return _weights.GwtElement_dt(*args)
    def SpatialLag(*args): return _weights.GwtElement_SpatialLag(*args)
    def GetData(*args): return _weights.GwtElement_GetData(*args)
GwtElement_swigregister = _weights.GwtElement_swigregister
GwtElement_swigregister(GwtElement)

class GwtWeight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GwtWeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GwtWeight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _weights.new_GwtWeight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _weights.delete_GwtWeight
    __del__ = lambda self : None;
    __swig_setmethods__["gwt"] = _weights.GwtWeight_gwt_set
    __swig_getmethods__["gwt"] = _weights.GwtWeight_gwt_get
    if _newclass:gwt = _swig_property(_weights.GwtWeight_gwt_get, _weights.GwtWeight_gwt_set)
    __swig_setmethods__["gal"] = _weights.GwtWeight_gal_set
    __swig_getmethods__["gal"] = _weights.GwtWeight_gal_get
    if _newclass:gal = _swig_property(_weights.GwtWeight_gal_get, _weights.GwtWeight_gal_set)
    __swig_getmethods__["HasIsolates"] = lambda x: _weights.GwtWeight_HasIsolates
    if _newclass:HasIsolates = staticmethod(_weights.GwtWeight_HasIsolates)
    def ReadGwtAsGal(*args): return _weights.GwtWeight_ReadGwtAsGal(*args)
    def ReadGwt(*args): return _weights.GwtWeight_ReadGwt(*args)
    def Gwt2Gal(*args): return _weights.GwtWeight_Gwt2Gal(*args)
GwtWeight_swigregister = _weights.GwtWeight_swigregister
GwtWeight_swigregister(GwtWeight)
GwtWeight_HasIsolates = _weights.GwtWeight_HasIsolates



