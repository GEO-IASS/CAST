# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mt_densitymap
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mt_densitymap.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mt_densitymap.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _mt_densitymap.intArray___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.intArray___setitem__(*args)
    def cast(*args): return _mt_densitymap.intArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _mt_densitymap.intArray_frompointer
    if _newclass:frompointer = staticmethod(_mt_densitymap.intArray_frompointer)
intArray_swigregister = _mt_densitymap.intArray_swigregister
intArray_swigregister(intArray)
intArray_frompointer = _mt_densitymap.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mt_densitymap.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mt_densitymap.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _mt_densitymap.doubleArray___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.doubleArray___setitem__(*args)
    def cast(*args): return _mt_densitymap.doubleArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _mt_densitymap.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_mt_densitymap.doubleArray_frompointer)
doubleArray_swigregister = _mt_densitymap.doubleArray_swigregister
doubleArray_swigregister(doubleArray)
doubleArray_frompointer = _mt_densitymap.doubleArray_frompointer

class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _mt_densitymap.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _mt_densitymap.PySwigIterator_value(*args)
    def incr(*args): return _mt_densitymap.PySwigIterator_incr(*args)
    def decr(*args): return _mt_densitymap.PySwigIterator_decr(*args)
    def distance(*args): return _mt_densitymap.PySwigIterator_distance(*args)
    def equal(*args): return _mt_densitymap.PySwigIterator_equal(*args)
    def copy(*args): return _mt_densitymap.PySwigIterator_copy(*args)
    def next(*args): return _mt_densitymap.PySwigIterator_next(*args)
    def previous(*args): return _mt_densitymap.PySwigIterator_previous(*args)
    def advance(*args): return _mt_densitymap.PySwigIterator_advance(*args)
    def __eq__(*args): return _mt_densitymap.PySwigIterator___eq__(*args)
    def __ne__(*args): return _mt_densitymap.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _mt_densitymap.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _mt_densitymap.PySwigIterator___isub__(*args)
    def __add__(*args): return _mt_densitymap.PySwigIterator___add__(*args)
    def __sub__(*args): return _mt_densitymap.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _mt_densitymap.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecDouble, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecDouble_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecDouble___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecDouble___len__(*args)
    def pop(*args): return _mt_densitymap.VecDouble_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecDouble___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecDouble___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecDouble___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecDouble___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecDouble___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecDouble___setitem__(*args)
    def append(*args): return _mt_densitymap.VecDouble_append(*args)
    def empty(*args): return _mt_densitymap.VecDouble_empty(*args)
    def size(*args): return _mt_densitymap.VecDouble_size(*args)
    def clear(*args): return _mt_densitymap.VecDouble_clear(*args)
    def swap(*args): return _mt_densitymap.VecDouble_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecDouble_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecDouble_begin(*args)
    def end(*args): return _mt_densitymap.VecDouble_end(*args)
    def rbegin(*args): return _mt_densitymap.VecDouble_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecDouble_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecDouble_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecDouble_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecDouble_push_back(*args)
    def front(*args): return _mt_densitymap.VecDouble_front(*args)
    def back(*args): return _mt_densitymap.VecDouble_back(*args)
    def assign(*args): return _mt_densitymap.VecDouble_assign(*args)
    def resize(*args): return _mt_densitymap.VecDouble_resize(*args)
    def insert(*args): return _mt_densitymap.VecDouble_insert(*args)
    def reserve(*args): return _mt_densitymap.VecDouble_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecDouble_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecDouble
    __del__ = lambda self : None;
VecDouble_swigregister = _mt_densitymap.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecDouble, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecVecDouble_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecVecDouble___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecVecDouble___len__(*args)
    def pop(*args): return _mt_densitymap.VecVecDouble_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecVecDouble___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecVecDouble___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecVecDouble___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecVecDouble___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecVecDouble___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecVecDouble___setitem__(*args)
    def append(*args): return _mt_densitymap.VecVecDouble_append(*args)
    def empty(*args): return _mt_densitymap.VecVecDouble_empty(*args)
    def size(*args): return _mt_densitymap.VecVecDouble_size(*args)
    def clear(*args): return _mt_densitymap.VecVecDouble_clear(*args)
    def swap(*args): return _mt_densitymap.VecVecDouble_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecVecDouble_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecVecDouble_begin(*args)
    def end(*args): return _mt_densitymap.VecVecDouble_end(*args)
    def rbegin(*args): return _mt_densitymap.VecVecDouble_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecVecDouble_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecVecDouble_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecVecDouble_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecVecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecVecDouble_push_back(*args)
    def front(*args): return _mt_densitymap.VecVecDouble_front(*args)
    def back(*args): return _mt_densitymap.VecVecDouble_back(*args)
    def assign(*args): return _mt_densitymap.VecVecDouble_assign(*args)
    def resize(*args): return _mt_densitymap.VecVecDouble_resize(*args)
    def insert(*args): return _mt_densitymap.VecVecDouble_insert(*args)
    def reserve(*args): return _mt_densitymap.VecVecDouble_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecVecDouble_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecVecDouble
    __del__ = lambda self : None;
VecVecDouble_swigregister = _mt_densitymap.VecVecDouble_swigregister
VecVecDouble_swigregister(VecVecDouble)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecInt___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecInt___len__(*args)
    def pop(*args): return _mt_densitymap.VecInt_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecInt___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecInt___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecInt___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecInt___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecInt___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecInt___setitem__(*args)
    def append(*args): return _mt_densitymap.VecInt_append(*args)
    def empty(*args): return _mt_densitymap.VecInt_empty(*args)
    def size(*args): return _mt_densitymap.VecInt_size(*args)
    def clear(*args): return _mt_densitymap.VecInt_clear(*args)
    def swap(*args): return _mt_densitymap.VecInt_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecInt_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecInt_begin(*args)
    def end(*args): return _mt_densitymap.VecInt_end(*args)
    def rbegin(*args): return _mt_densitymap.VecInt_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecInt_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecInt_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecInt_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecInt_push_back(*args)
    def front(*args): return _mt_densitymap.VecInt_front(*args)
    def back(*args): return _mt_densitymap.VecInt_back(*args)
    def assign(*args): return _mt_densitymap.VecInt_assign(*args)
    def resize(*args): return _mt_densitymap.VecInt_resize(*args)
    def insert(*args): return _mt_densitymap.VecInt_insert(*args)
    def reserve(*args): return _mt_densitymap.VecInt_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecInt_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _mt_densitymap.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecVecInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecVecInt___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecVecInt___len__(*args)
    def pop(*args): return _mt_densitymap.VecVecInt_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecVecInt___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecVecInt___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecVecInt___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecVecInt___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecVecInt___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecVecInt___setitem__(*args)
    def append(*args): return _mt_densitymap.VecVecInt_append(*args)
    def empty(*args): return _mt_densitymap.VecVecInt_empty(*args)
    def size(*args): return _mt_densitymap.VecVecInt_size(*args)
    def clear(*args): return _mt_densitymap.VecVecInt_clear(*args)
    def swap(*args): return _mt_densitymap.VecVecInt_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecVecInt_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecVecInt_begin(*args)
    def end(*args): return _mt_densitymap.VecVecInt_end(*args)
    def rbegin(*args): return _mt_densitymap.VecVecInt_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecVecInt_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecVecInt_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecVecInt_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecVecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecVecInt_push_back(*args)
    def front(*args): return _mt_densitymap.VecVecInt_front(*args)
    def back(*args): return _mt_densitymap.VecVecInt_back(*args)
    def assign(*args): return _mt_densitymap.VecVecInt_assign(*args)
    def resize(*args): return _mt_densitymap.VecVecInt_resize(*args)
    def insert(*args): return _mt_densitymap.VecVecInt_insert(*args)
    def reserve(*args): return _mt_densitymap.VecVecInt_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecVecInt_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecVecInt
    __del__ = lambda self : None;
VecVecInt_swigregister = _mt_densitymap.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecUINT8, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecUINT8_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecUINT8___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecUINT8___len__(*args)
    def pop(*args): return _mt_densitymap.VecUINT8_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecUINT8___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecUINT8___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecUINT8___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecUINT8___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecUINT8___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecUINT8___setitem__(*args)
    def append(*args): return _mt_densitymap.VecUINT8_append(*args)
    def empty(*args): return _mt_densitymap.VecUINT8_empty(*args)
    def size(*args): return _mt_densitymap.VecUINT8_size(*args)
    def clear(*args): return _mt_densitymap.VecUINT8_clear(*args)
    def swap(*args): return _mt_densitymap.VecUINT8_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecUINT8_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecUINT8_begin(*args)
    def end(*args): return _mt_densitymap.VecUINT8_end(*args)
    def rbegin(*args): return _mt_densitymap.VecUINT8_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecUINT8_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecUINT8_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecUINT8_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecUINT8(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecUINT8_push_back(*args)
    def front(*args): return _mt_densitymap.VecUINT8_front(*args)
    def back(*args): return _mt_densitymap.VecUINT8_back(*args)
    def assign(*args): return _mt_densitymap.VecUINT8_assign(*args)
    def resize(*args): return _mt_densitymap.VecUINT8_resize(*args)
    def insert(*args): return _mt_densitymap.VecUINT8_insert(*args)
    def reserve(*args): return _mt_densitymap.VecUINT8_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecUINT8_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecUINT8
    __del__ = lambda self : None;
VecUINT8_swigregister = _mt_densitymap.VecUINT8_swigregister
VecUINT8_swigregister(VecUINT8)

class VecVecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecUINT8, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mt_densitymap.VecVecUINT8_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mt_densitymap.VecVecUINT8___nonzero__(*args)
    def __len__(*args): return _mt_densitymap.VecVecUINT8___len__(*args)
    def pop(*args): return _mt_densitymap.VecVecUINT8_pop(*args)
    def __getslice__(*args): return _mt_densitymap.VecVecUINT8___getslice__(*args)
    def __setslice__(*args): return _mt_densitymap.VecVecUINT8___setslice__(*args)
    def __delslice__(*args): return _mt_densitymap.VecVecUINT8___delslice__(*args)
    def __delitem__(*args): return _mt_densitymap.VecVecUINT8___delitem__(*args)
    def __getitem__(*args): return _mt_densitymap.VecVecUINT8___getitem__(*args)
    def __setitem__(*args): return _mt_densitymap.VecVecUINT8___setitem__(*args)
    def append(*args): return _mt_densitymap.VecVecUINT8_append(*args)
    def empty(*args): return _mt_densitymap.VecVecUINT8_empty(*args)
    def size(*args): return _mt_densitymap.VecVecUINT8_size(*args)
    def clear(*args): return _mt_densitymap.VecVecUINT8_clear(*args)
    def swap(*args): return _mt_densitymap.VecVecUINT8_swap(*args)
    def get_allocator(*args): return _mt_densitymap.VecVecUINT8_get_allocator(*args)
    def begin(*args): return _mt_densitymap.VecVecUINT8_begin(*args)
    def end(*args): return _mt_densitymap.VecVecUINT8_end(*args)
    def rbegin(*args): return _mt_densitymap.VecVecUINT8_rbegin(*args)
    def rend(*args): return _mt_densitymap.VecVecUINT8_rend(*args)
    def pop_back(*args): return _mt_densitymap.VecVecUINT8_pop_back(*args)
    def erase(*args): return _mt_densitymap.VecVecUINT8_erase(*args)
    def __init__(self, *args): 
        this = _mt_densitymap.new_VecVecUINT8(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mt_densitymap.VecVecUINT8_push_back(*args)
    def front(*args): return _mt_densitymap.VecVecUINT8_front(*args)
    def back(*args): return _mt_densitymap.VecVecUINT8_back(*args)
    def assign(*args): return _mt_densitymap.VecVecUINT8_assign(*args)
    def resize(*args): return _mt_densitymap.VecVecUINT8_resize(*args)
    def insert(*args): return _mt_densitymap.VecVecUINT8_insert(*args)
    def reserve(*args): return _mt_densitymap.VecVecUINT8_reserve(*args)
    def capacity(*args): return _mt_densitymap.VecVecUINT8_capacity(*args)
    __swig_destroy__ = _mt_densitymap.delete_VecVecUINT8
    __del__ = lambda self : None;
VecVecUINT8_swigregister = _mt_densitymap.VecVecUINT8_swigregister
VecVecUINT8_swigregister(VecVecUINT8)

NUM_THREADS = _mt_densitymap.NUM_THREADS
class MyThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyThread, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _mt_densitymap.delete_MyThread
    __del__ = lambda self : None;
    def start(*args): return _mt_densitymap.MyThread_start(*args)
    def join(*args): return _mt_densitymap.MyThread_join(*args)
MyThread_swigregister = _mt_densitymap.MyThread_swigregister
MyThread_swigregister(MyThread)

triangular = _mt_densitymap.triangular
uniform = _mt_densitymap.uniform
quadratic = _mt_densitymap.quadratic
gaussian = _mt_densitymap.gaussian
class KDE(MyThread):
    __swig_setmethods__ = {}
    for _s in [MyThread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KDE, name, value)
    __swig_getmethods__ = {}
    for _s in [MyThread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mt_densitymap.new_KDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mt_densitymap.delete_KDE
    __del__ = lambda self : None;
    __swig_setmethods__["cols"] = _mt_densitymap.KDE_cols_set
    __swig_getmethods__["cols"] = _mt_densitymap.KDE_cols_get
    if _newclass:cols = _swig_property(_mt_densitymap.KDE_cols_get, _mt_densitymap.KDE_cols_set)
    __swig_setmethods__["rows"] = _mt_densitymap.KDE_rows_set
    __swig_getmethods__["rows"] = _mt_densitymap.KDE_rows_get
    if _newclass:rows = _swig_property(_mt_densitymap.KDE_rows_get, _mt_densitymap.KDE_rows_set)
    __swig_setmethods__["gradient_min"] = _mt_densitymap.KDE_gradient_min_set
    __swig_getmethods__["gradient_min"] = _mt_densitymap.KDE_gradient_min_get
    if _newclass:gradient_min = _swig_property(_mt_densitymap.KDE_gradient_min_get, _mt_densitymap.KDE_gradient_min_set)
    __swig_setmethods__["gradient_max"] = _mt_densitymap.KDE_gradient_max_set
    __swig_getmethods__["gradient_max"] = _mt_densitymap.KDE_gradient_max_get
    if _newclass:gradient_max = _swig_property(_mt_densitymap.KDE_gradient_max_get, _mt_densitymap.KDE_gradient_max_set)
    __swig_setmethods__["r_buffer"] = _mt_densitymap.KDE_r_buffer_set
    __swig_getmethods__["r_buffer"] = _mt_densitymap.KDE_r_buffer_get
    if _newclass:r_buffer = _swig_property(_mt_densitymap.KDE_r_buffer_get, _mt_densitymap.KDE_r_buffer_set)
    __swig_setmethods__["g_buffer"] = _mt_densitymap.KDE_g_buffer_set
    __swig_getmethods__["g_buffer"] = _mt_densitymap.KDE_g_buffer_get
    if _newclass:g_buffer = _swig_property(_mt_densitymap.KDE_g_buffer_get, _mt_densitymap.KDE_g_buffer_set)
    __swig_setmethods__["b_buffer"] = _mt_densitymap.KDE_b_buffer_set
    __swig_getmethods__["b_buffer"] = _mt_densitymap.KDE_b_buffer_get
    if _newclass:b_buffer = _swig_property(_mt_densitymap.KDE_b_buffer_get, _mt_densitymap.KDE_b_buffer_set)
    __swig_setmethods__["a_buffer"] = _mt_densitymap.KDE_a_buffer_set
    __swig_getmethods__["a_buffer"] = _mt_densitymap.KDE_a_buffer_get
    if _newclass:a_buffer = _swig_property(_mt_densitymap.KDE_a_buffer_get, _mt_densitymap.KDE_a_buffer_set)
    def update_grid(*args): return _mt_densitymap.KDE_update_grid(*args)
    def get_minmax_gradient(*args): return _mt_densitymap.KDE_get_minmax_gradient(*args)
    def create_rgba_buffer(*args): return _mt_densitymap.KDE_create_rgba_buffer(*args)
KDE_swigregister = _mt_densitymap.KDE_swigregister
KDE_swigregister(KDE)

class DKDE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DKDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DKDE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mt_densitymap.new_DKDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mt_densitymap.delete_DKDE
    __del__ = lambda self : None;
    __swig_setmethods__["cols"] = _mt_densitymap.DKDE_cols_set
    __swig_getmethods__["cols"] = _mt_densitymap.DKDE_cols_get
    if _newclass:cols = _swig_property(_mt_densitymap.DKDE_cols_get, _mt_densitymap.DKDE_cols_set)
    __swig_setmethods__["rows"] = _mt_densitymap.DKDE_rows_set
    __swig_getmethods__["rows"] = _mt_densitymap.DKDE_rows_get
    if _newclass:rows = _swig_property(_mt_densitymap.DKDE_rows_get, _mt_densitymap.DKDE_rows_set)
    __swig_setmethods__["gradient_min"] = _mt_densitymap.DKDE_gradient_min_set
    __swig_getmethods__["gradient_min"] = _mt_densitymap.DKDE_gradient_min_get
    if _newclass:gradient_min = _swig_property(_mt_densitymap.DKDE_gradient_min_get, _mt_densitymap.DKDE_gradient_min_set)
    __swig_setmethods__["gradient_max"] = _mt_densitymap.DKDE_gradient_max_set
    __swig_getmethods__["gradient_max"] = _mt_densitymap.DKDE_gradient_max_get
    if _newclass:gradient_max = _swig_property(_mt_densitymap.DKDE_gradient_max_get, _mt_densitymap.DKDE_gradient_max_set)
    __swig_setmethods__["r_buffer_array"] = _mt_densitymap.DKDE_r_buffer_array_set
    __swig_getmethods__["r_buffer_array"] = _mt_densitymap.DKDE_r_buffer_array_get
    if _newclass:r_buffer_array = _swig_property(_mt_densitymap.DKDE_r_buffer_array_get, _mt_densitymap.DKDE_r_buffer_array_set)
    __swig_setmethods__["g_buffer_array"] = _mt_densitymap.DKDE_g_buffer_array_set
    __swig_getmethods__["g_buffer_array"] = _mt_densitymap.DKDE_g_buffer_array_get
    if _newclass:g_buffer_array = _swig_property(_mt_densitymap.DKDE_g_buffer_array_get, _mt_densitymap.DKDE_g_buffer_array_set)
    __swig_setmethods__["b_buffer_array"] = _mt_densitymap.DKDE_b_buffer_array_set
    __swig_getmethods__["b_buffer_array"] = _mt_densitymap.DKDE_b_buffer_array_get
    if _newclass:b_buffer_array = _swig_property(_mt_densitymap.DKDE_b_buffer_array_get, _mt_densitymap.DKDE_b_buffer_array_set)
    __swig_setmethods__["a_buffer_array"] = _mt_densitymap.DKDE_a_buffer_array_set
    __swig_getmethods__["a_buffer_array"] = _mt_densitymap.DKDE_a_buffer_array_get
    if _newclass:a_buffer_array = _swig_property(_mt_densitymap.DKDE_a_buffer_array_get, _mt_densitymap.DKDE_a_buffer_array_set)
DKDE_swigregister = _mt_densitymap.DKDE_swigregister
DKDE_swigregister(DKDE)


cvar = _mt_densitymap.cvar

