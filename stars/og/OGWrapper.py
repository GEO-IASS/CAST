# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _OGWrapper
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _OGWrapper.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _OGWrapper.PySwigIterator_value(*args)
    def incr(*args): return _OGWrapper.PySwigIterator_incr(*args)
    def decr(*args): return _OGWrapper.PySwigIterator_decr(*args)
    def distance(*args): return _OGWrapper.PySwigIterator_distance(*args)
    def equal(*args): return _OGWrapper.PySwigIterator_equal(*args)
    def copy(*args): return _OGWrapper.PySwigIterator_copy(*args)
    def next(*args): return _OGWrapper.PySwigIterator_next(*args)
    def previous(*args): return _OGWrapper.PySwigIterator_previous(*args)
    def advance(*args): return _OGWrapper.PySwigIterator_advance(*args)
    def __eq__(*args): return _OGWrapper.PySwigIterator___eq__(*args)
    def __ne__(*args): return _OGWrapper.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _OGWrapper.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _OGWrapper.PySwigIterator___isub__(*args)
    def __add__(*args): return _OGWrapper.PySwigIterator___add__(*args)
    def __sub__(*args): return _OGWrapper.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _OGWrapper.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecDouble, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecDouble_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecDouble___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecDouble___len__(*args)
    def pop(*args): return _OGWrapper.VecDouble_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecDouble___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecDouble___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecDouble___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecDouble___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecDouble___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecDouble___setitem__(*args)
    def append(*args): return _OGWrapper.VecDouble_append(*args)
    def empty(*args): return _OGWrapper.VecDouble_empty(*args)
    def size(*args): return _OGWrapper.VecDouble_size(*args)
    def clear(*args): return _OGWrapper.VecDouble_clear(*args)
    def swap(*args): return _OGWrapper.VecDouble_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecDouble_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecDouble_begin(*args)
    def end(*args): return _OGWrapper.VecDouble_end(*args)
    def rbegin(*args): return _OGWrapper.VecDouble_rbegin(*args)
    def rend(*args): return _OGWrapper.VecDouble_rend(*args)
    def pop_back(*args): return _OGWrapper.VecDouble_pop_back(*args)
    def erase(*args): return _OGWrapper.VecDouble_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecDouble_push_back(*args)
    def front(*args): return _OGWrapper.VecDouble_front(*args)
    def back(*args): return _OGWrapper.VecDouble_back(*args)
    def assign(*args): return _OGWrapper.VecDouble_assign(*args)
    def resize(*args): return _OGWrapper.VecDouble_resize(*args)
    def insert(*args): return _OGWrapper.VecDouble_insert(*args)
    def reserve(*args): return _OGWrapper.VecDouble_reserve(*args)
    def capacity(*args): return _OGWrapper.VecDouble_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecDouble
    __del__ = lambda self : None;
VecDouble_swigregister = _OGWrapper.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecDouble, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecVecDouble_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecVecDouble___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecVecDouble___len__(*args)
    def pop(*args): return _OGWrapper.VecVecDouble_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecVecDouble___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecVecDouble___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecVecDouble___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecVecDouble___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecVecDouble___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecVecDouble___setitem__(*args)
    def append(*args): return _OGWrapper.VecVecDouble_append(*args)
    def empty(*args): return _OGWrapper.VecVecDouble_empty(*args)
    def size(*args): return _OGWrapper.VecVecDouble_size(*args)
    def clear(*args): return _OGWrapper.VecVecDouble_clear(*args)
    def swap(*args): return _OGWrapper.VecVecDouble_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecVecDouble_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecVecDouble_begin(*args)
    def end(*args): return _OGWrapper.VecVecDouble_end(*args)
    def rbegin(*args): return _OGWrapper.VecVecDouble_rbegin(*args)
    def rend(*args): return _OGWrapper.VecVecDouble_rend(*args)
    def pop_back(*args): return _OGWrapper.VecVecDouble_pop_back(*args)
    def erase(*args): return _OGWrapper.VecVecDouble_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecVecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecVecDouble_push_back(*args)
    def front(*args): return _OGWrapper.VecVecDouble_front(*args)
    def back(*args): return _OGWrapper.VecVecDouble_back(*args)
    def assign(*args): return _OGWrapper.VecVecDouble_assign(*args)
    def resize(*args): return _OGWrapper.VecVecDouble_resize(*args)
    def insert(*args): return _OGWrapper.VecVecDouble_insert(*args)
    def reserve(*args): return _OGWrapper.VecVecDouble_reserve(*args)
    def capacity(*args): return _OGWrapper.VecVecDouble_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecVecDouble
    __del__ = lambda self : None;
VecVecDouble_swigregister = _OGWrapper.VecVecDouble_swigregister
VecVecDouble_swigregister(VecVecDouble)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecInt___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecInt___len__(*args)
    def pop(*args): return _OGWrapper.VecInt_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecInt___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecInt___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecInt___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecInt___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecInt___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecInt___setitem__(*args)
    def append(*args): return _OGWrapper.VecInt_append(*args)
    def empty(*args): return _OGWrapper.VecInt_empty(*args)
    def size(*args): return _OGWrapper.VecInt_size(*args)
    def clear(*args): return _OGWrapper.VecInt_clear(*args)
    def swap(*args): return _OGWrapper.VecInt_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecInt_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecInt_begin(*args)
    def end(*args): return _OGWrapper.VecInt_end(*args)
    def rbegin(*args): return _OGWrapper.VecInt_rbegin(*args)
    def rend(*args): return _OGWrapper.VecInt_rend(*args)
    def pop_back(*args): return _OGWrapper.VecInt_pop_back(*args)
    def erase(*args): return _OGWrapper.VecInt_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecInt_push_back(*args)
    def front(*args): return _OGWrapper.VecInt_front(*args)
    def back(*args): return _OGWrapper.VecInt_back(*args)
    def assign(*args): return _OGWrapper.VecInt_assign(*args)
    def resize(*args): return _OGWrapper.VecInt_resize(*args)
    def insert(*args): return _OGWrapper.VecInt_insert(*args)
    def reserve(*args): return _OGWrapper.VecInt_reserve(*args)
    def capacity(*args): return _OGWrapper.VecInt_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _OGWrapper.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecVecInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecVecInt___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecVecInt___len__(*args)
    def pop(*args): return _OGWrapper.VecVecInt_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecVecInt___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecVecInt___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecVecInt___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecVecInt___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecVecInt___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecVecInt___setitem__(*args)
    def append(*args): return _OGWrapper.VecVecInt_append(*args)
    def empty(*args): return _OGWrapper.VecVecInt_empty(*args)
    def size(*args): return _OGWrapper.VecVecInt_size(*args)
    def clear(*args): return _OGWrapper.VecVecInt_clear(*args)
    def swap(*args): return _OGWrapper.VecVecInt_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecVecInt_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecVecInt_begin(*args)
    def end(*args): return _OGWrapper.VecVecInt_end(*args)
    def rbegin(*args): return _OGWrapper.VecVecInt_rbegin(*args)
    def rend(*args): return _OGWrapper.VecVecInt_rend(*args)
    def pop_back(*args): return _OGWrapper.VecVecInt_pop_back(*args)
    def erase(*args): return _OGWrapper.VecVecInt_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecVecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecVecInt_push_back(*args)
    def front(*args): return _OGWrapper.VecVecInt_front(*args)
    def back(*args): return _OGWrapper.VecVecInt_back(*args)
    def assign(*args): return _OGWrapper.VecVecInt_assign(*args)
    def resize(*args): return _OGWrapper.VecVecInt_resize(*args)
    def insert(*args): return _OGWrapper.VecVecInt_insert(*args)
    def reserve(*args): return _OGWrapper.VecVecInt_reserve(*args)
    def capacity(*args): return _OGWrapper.VecVecInt_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecVecInt
    __del__ = lambda self : None;
VecVecInt_swigregister = _OGWrapper.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecUINT8, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecUINT8_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecUINT8___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecUINT8___len__(*args)
    def pop(*args): return _OGWrapper.VecUINT8_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecUINT8___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecUINT8___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecUINT8___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecUINT8___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecUINT8___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecUINT8___setitem__(*args)
    def append(*args): return _OGWrapper.VecUINT8_append(*args)
    def empty(*args): return _OGWrapper.VecUINT8_empty(*args)
    def size(*args): return _OGWrapper.VecUINT8_size(*args)
    def clear(*args): return _OGWrapper.VecUINT8_clear(*args)
    def swap(*args): return _OGWrapper.VecUINT8_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecUINT8_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecUINT8_begin(*args)
    def end(*args): return _OGWrapper.VecUINT8_end(*args)
    def rbegin(*args): return _OGWrapper.VecUINT8_rbegin(*args)
    def rend(*args): return _OGWrapper.VecUINT8_rend(*args)
    def pop_back(*args): return _OGWrapper.VecUINT8_pop_back(*args)
    def erase(*args): return _OGWrapper.VecUINT8_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecUINT8(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecUINT8_push_back(*args)
    def front(*args): return _OGWrapper.VecUINT8_front(*args)
    def back(*args): return _OGWrapper.VecUINT8_back(*args)
    def assign(*args): return _OGWrapper.VecUINT8_assign(*args)
    def resize(*args): return _OGWrapper.VecUINT8_resize(*args)
    def insert(*args): return _OGWrapper.VecUINT8_insert(*args)
    def reserve(*args): return _OGWrapper.VecUINT8_reserve(*args)
    def capacity(*args): return _OGWrapper.VecUINT8_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecUINT8
    __del__ = lambda self : None;
VecUINT8_swigregister = _OGWrapper.VecUINT8_swigregister
VecUINT8_swigregister(VecUINT8)

class VecVecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecUINT8, name)
    __repr__ = _swig_repr
    def iterator(*args): return _OGWrapper.VecVecUINT8_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _OGWrapper.VecVecUINT8___nonzero__(*args)
    def __len__(*args): return _OGWrapper.VecVecUINT8___len__(*args)
    def pop(*args): return _OGWrapper.VecVecUINT8_pop(*args)
    def __getslice__(*args): return _OGWrapper.VecVecUINT8___getslice__(*args)
    def __setslice__(*args): return _OGWrapper.VecVecUINT8___setslice__(*args)
    def __delslice__(*args): return _OGWrapper.VecVecUINT8___delslice__(*args)
    def __delitem__(*args): return _OGWrapper.VecVecUINT8___delitem__(*args)
    def __getitem__(*args): return _OGWrapper.VecVecUINT8___getitem__(*args)
    def __setitem__(*args): return _OGWrapper.VecVecUINT8___setitem__(*args)
    def append(*args): return _OGWrapper.VecVecUINT8_append(*args)
    def empty(*args): return _OGWrapper.VecVecUINT8_empty(*args)
    def size(*args): return _OGWrapper.VecVecUINT8_size(*args)
    def clear(*args): return _OGWrapper.VecVecUINT8_clear(*args)
    def swap(*args): return _OGWrapper.VecVecUINT8_swap(*args)
    def get_allocator(*args): return _OGWrapper.VecVecUINT8_get_allocator(*args)
    def begin(*args): return _OGWrapper.VecVecUINT8_begin(*args)
    def end(*args): return _OGWrapper.VecVecUINT8_end(*args)
    def rbegin(*args): return _OGWrapper.VecVecUINT8_rbegin(*args)
    def rend(*args): return _OGWrapper.VecVecUINT8_rend(*args)
    def pop_back(*args): return _OGWrapper.VecVecUINT8_pop_back(*args)
    def erase(*args): return _OGWrapper.VecVecUINT8_erase(*args)
    def __init__(self, *args): 
        this = _OGWrapper.new_VecVecUINT8(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _OGWrapper.VecVecUINT8_push_back(*args)
    def front(*args): return _OGWrapper.VecVecUINT8_front(*args)
    def back(*args): return _OGWrapper.VecVecUINT8_back(*args)
    def assign(*args): return _OGWrapper.VecVecUINT8_assign(*args)
    def resize(*args): return _OGWrapper.VecVecUINT8_resize(*args)
    def insert(*args): return _OGWrapper.VecVecUINT8_insert(*args)
    def reserve(*args): return _OGWrapper.VecVecUINT8_reserve(*args)
    def capacity(*args): return _OGWrapper.VecVecUINT8_capacity(*args)
    __swig_destroy__ = _OGWrapper.delete_VecVecUINT8
    __del__ = lambda self : None;
VecVecUINT8_swigregister = _OGWrapper.VecVecUINT8_swigregister
VecVecUINT8_swigregister(VecVecUINT8)

OGIsLineShapeFile = _OGWrapper.OGIsLineShapeFile
OGCreateGal = _OGWrapper.OGCreateGal
OGCreateGwt = _OGWrapper.OGCreateGwt
OGComputeCutOffPoint = _OGWrapper.OGComputeCutOffPoint
OGComputeMaxDistance = _OGWrapper.OGComputeMaxDistance


